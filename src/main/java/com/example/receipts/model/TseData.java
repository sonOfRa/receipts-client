/*
 * Example API for receipts
 * API for generating receipts and mailing them to users
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.example.receipts.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * TseData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-26T15:28:50.841+01:00[Europe/Berlin]")
public class TseData {
  @SerializedName("signature")
  private String signature = null;

  @SerializedName("transactionNumber")
  private Long transactionNumber = null;

  @SerializedName("transactionStart")
  private OffsetDateTime transactionStart = null;

  @SerializedName("transactionEnd")
  private OffsetDateTime transactionEnd = null;

  @SerializedName("serialNumber")
  private String serialNumber = null;

  @SerializedName("signatureCount")
  private Long signatureCount = null;

  @SerializedName("timeFormat")
  private String timeFormat = null;

  @SerializedName("publicKey")
  private String publicKey = null;

  @SerializedName("signatureAlgorithm")
  private String signatureAlgorithm = null;

  @SerializedName("qrCodeString")
  private String qrCodeString = null;

  public TseData signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * receiptsignature from tse
   * @return signature
  **/
  @Schema(example = "MEQCIHQRwSL6tvG3DoffVxVVR7ylGLrCRrlsgO08xls019QuAiBO2Qx3mHC1XdajX13Y7PNQ4TXmf3e4g4iagoxqpuaTLg==", required = true, description = "receiptsignature from tse")
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }

  public TseData transactionNumber(Long transactionNumber) {
    this.transactionNumber = transactionNumber;
    return this;
  }

   /**
   * transactionnumber of TSE
   * @return transactionNumber
  **/
  @Schema(example = "25", required = true, description = "transactionnumber of TSE")
  public Long getTransactionNumber() {
    return transactionNumber;
  }

  public void setTransactionNumber(Long transactionNumber) {
    this.transactionNumber = transactionNumber;
  }

  public TseData transactionStart(OffsetDateTime transactionStart) {
    this.transactionStart = transactionStart;
    return this;
  }

   /**
   * datetime of the first Transaction for current receipt
   * @return transactionStart
  **/
  @Schema(example = "2019-07-30T14:40:33Z", required = true, description = "datetime of the first Transaction for current receipt")
  public OffsetDateTime getTransactionStart() {
    return transactionStart;
  }

  public void setTransactionStart(OffsetDateTime transactionStart) {
    this.transactionStart = transactionStart;
  }

  public TseData transactionEnd(OffsetDateTime transactionEnd) {
    this.transactionEnd = transactionEnd;
    return this;
  }

   /**
   * datetime of the last Transaction for current receipt
   * @return transactionEnd
  **/
  @Schema(example = "2019-07-30T14:40:33Z", required = true, description = "datetime of the last Transaction for current receipt")
  public OffsetDateTime getTransactionEnd() {
    return transactionEnd;
  }

  public void setTransactionEnd(OffsetDateTime transactionEnd) {
    this.transactionEnd = transactionEnd;
  }

  public TseData serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * serial number of used tse
   * @return serialNumber
  **/
  @Schema(example = "12345-abcde-67890", required = true, description = "serial number of used tse")
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }

  public TseData signatureCount(Long signatureCount) {
    this.signatureCount = signatureCount;
    return this;
  }

   /**
   * signature count of TSE
   * @return signatureCount
  **/
  @Schema(example = "125", required = true, description = "signature count of TSE")
  public Long getSignatureCount() {
    return signatureCount;
  }

  public void setSignatureCount(Long signatureCount) {
    this.signatureCount = signatureCount;
  }

  public TseData timeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

   /**
   * time format of TSE
   * @return timeFormat
  **/
  @Schema(example = "date-time", required = true, description = "time format of TSE")
  public String getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
  }

  public TseData publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

   /**
   * public of tse
   * @return publicKey
  **/
  @Schema(example = "BKRaS+BAaTnwCJPHLFUY1UYk88UXNFOPOjelUVSh1vBCRBNefihVIejklN4n9bIPBdFbnY265YgzxUq9ys9hXig=", required = true, description = "public of tse")
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }

  public TseData signatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

   /**
   * used signature algorithm of tse
   * @return signatureAlgorithm
  **/
  @Schema(example = "SHA256withECDSA", required = true, description = "used signature algorithm of tse")
  public String getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }

  public TseData qrCodeString(String qrCodeString) {
    this.qrCodeString = qrCodeString;
    return this;
  }

   /**
   * String with Data to create qrCode for receipt
   * @return qrCodeString
  **/
  @Schema(example = "V0;SwissbitDemo;KassenBeleg-V1;Beleg^6.90_0.00_0.00_0.00_0.00^6.90:Bar;25;125;2019-07-30T14:40:33.000Z;2019-07-30T14:40:34.000Z;SHA256withECDSA;unixTime;MEQCIHQRwSL6tvG3DoffVxVVR7ylGLrCRrlsgO08xls019QuAiBO2Qx3mHC1XdajX13Y7PNQ4TXmf3e4g4iagoxqpuaTLg==;BKRaS+BAaTnwCJPHLFUY1UYk88UXNFOPOjelUVSh1vBCRBNefihVIejklN4n9bIPBdFbnY265YgzxUq9ys9hXig=", required = true, description = "String with Data to create qrCode for receipt")
  public String getQrCodeString() {
    return qrCodeString;
  }

  public void setQrCodeString(String qrCodeString) {
    this.qrCodeString = qrCodeString;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TseData tseData = (TseData) o;
    return Objects.equals(this.signature, tseData.signature) &&
        Objects.equals(this.transactionNumber, tseData.transactionNumber) &&
        Objects.equals(this.transactionStart, tseData.transactionStart) &&
        Objects.equals(this.transactionEnd, tseData.transactionEnd) &&
        Objects.equals(this.serialNumber, tseData.serialNumber) &&
        Objects.equals(this.signatureCount, tseData.signatureCount) &&
        Objects.equals(this.timeFormat, tseData.timeFormat) &&
        Objects.equals(this.publicKey, tseData.publicKey) &&
        Objects.equals(this.signatureAlgorithm, tseData.signatureAlgorithm) &&
        Objects.equals(this.qrCodeString, tseData.qrCodeString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signature, transactionNumber, transactionStart, transactionEnd, serialNumber, signatureCount, timeFormat, publicKey, signatureAlgorithm, qrCodeString);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TseData {\n");
    
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    transactionNumber: ").append(toIndentedString(transactionNumber)).append("\n");
    sb.append("    transactionStart: ").append(toIndentedString(transactionStart)).append("\n");
    sb.append("    transactionEnd: ").append(toIndentedString(transactionEnd)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    signatureCount: ").append(toIndentedString(signatureCount)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    qrCodeString: ").append(toIndentedString(qrCodeString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
