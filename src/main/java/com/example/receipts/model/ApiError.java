/*
 * Example API for receipts
 * API for generating receipts and mailing them to users
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.example.receipts.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * ApiError
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-26T15:28:50.841+01:00[Europe/Berlin]")
public class ApiError {
  @SerializedName("timeStamp")
  private OffsetDateTime timeStamp = null;

  @SerializedName("statusCode")
  private Integer statusCode = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("detailMessage")
  private String detailMessage = null;

  public ApiError timeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

   /**
   * The time at which the error occurred
   * @return timeStamp
  **/
  @Schema(example = "2019-07-30T14:40:33Z", required = true, description = "The time at which the error occurred")
  public OffsetDateTime getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
  }

  public ApiError statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * The HTTP Status Code of the request
   * @return statusCode
  **/
  @Schema(required = true, description = "The HTTP Status Code of the request")
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }

  public ApiError message(String message) {
    this.message = message;
    return this;
  }

   /**
   * A descriptive error message
   * @return message
  **/
  @Schema(required = true, description = "A descriptive error message")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public ApiError detailMessage(String detailMessage) {
    this.detailMessage = detailMessage;
    return this;
  }

   /**
   * A more detailed error message, like an exception message
   * @return detailMessage
  **/
  @Schema(description = "A more detailed error message, like an exception message")
  public String getDetailMessage() {
    return detailMessage;
  }

  public void setDetailMessage(String detailMessage) {
    this.detailMessage = detailMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiError apiError = (ApiError) o;
    return Objects.equals(this.timeStamp, apiError.timeStamp) &&
        Objects.equals(this.statusCode, apiError.statusCode) &&
        Objects.equals(this.message, apiError.message) &&
        Objects.equals(this.detailMessage, apiError.detailMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeStamp, statusCode, message, detailMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiError {\n");
    
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    detailMessage: ").append(toIndentedString(detailMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
